{"name": "test_vwo_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "username1 = 'gvk9786@gmail.com', password1 = 'Samarth@235'\n\n    def test_vwo_login(username1=username, password1=password):\n        chrome_options = Options()\n        # Add arguments to disable notifications and run in headless mode\n        # chrome_options.add_argument(\"--disable-notifications\")\n        # chrome_options.add_argument(\"--headless\")\n        chrome_options.add_argument(\"--incognito\")\n    \n        # Initialize the Chrome driver with the options\n        driver = webdriver.Chrome(options=chrome_options)\n        driver = webdriver.Chrome(chrome_options)\n        driver.get(vwo_login_url)\n    \n        Wait(driver=driver, timeout=5).until(EC.visibility_of_element_located((By.XPATH, login_button_locator)))\n    \n        username_web_element = driver.find_element(By.XPATH, username_locator)\n        password_web_element = driver.find_element(By.XPATH, password_locator)\n        login_button_web_element = driver.find_element(By.XPATH, login_button_locator)\n    \n        username_web_element.send_keys(username1)\n        password_web_element.send_keys(password1)\n        login_button_web_element.click()\n    \n        if vwo_dashboard_url is driver.current_url:\n            allure.attach(driver.get_screenshot_as_png(), name=username1 + \" Welcome to VWO\", attachment_type=AttachmentType.PNG)\n        else:\n>           Wait(driver=driver, timeout=5).until(EC.visibility_of_element_located((By.XPATH, error_msg_locator)))\n\n16-Aug-2024-Part_4\\test_data_driven_Practice.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c12fd9e9b676ab2013ea4e5cd4f1bbd6\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000019F246B5F80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1724611526522, "stop": 1724611543974, "uuid": "d62784d5-0d2f-4cc4-91ee-518f4fa719a9", "historyId": "fcb8dd318c4bcd8b99a4662c84c4693d", "testCaseId": "fcb8dd318c4bcd8b99a4662c84c4693d", "fullName": "16-Aug-2024-Part_4.test_data_driven_Practice#test_vwo_login", "labels": [{"name": "parentSuite", "value": "16-Aug-2024-Part_4"}, {"name": "suite", "value": "test_data_driven_Practice"}, {"name": "host", "value": "B1-L0W115181"}, {"name": "thread", "value": "51984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "16-Aug-2024-Part_4.test_data_driven_Practice"}]}